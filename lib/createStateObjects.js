// Generated by CoffeeScript 1.10.0
(function() {
  var createStateObjects, fs, shallowClone;

  shallowClone = require('./shallowClone');

  fs = require('fs');

  createStateObjects = function(file, cb) {
    return fs.readFile(file, 'utf8', function(err, content) {
      var current, isNextState, nesting, parsingState, states;
      if (err != null) {
        return cb(err);
      }
      states = {};
      nesting = {
        curlies: 0,
        square: 0,
        parens: 0
      };
      current = '';
      isNextState = false;
      parsingState = false;
      content.split('').forEach(function(letter) {
        var currNesting;
        if (letter === '{') {
          nesting.curlies++;
        }
        if (letter === '}') {
          nesting.curlies--;
        }
        if (letter === '(') {
          nesting.parens++;
        }
        if (letter === ')') {
          nesting.parens--;
        }
        if (letter === '[') {
          nesting.square++;
        }
        if (letter === ']') {
          nesting.square--;
        }
        if (parsingState) {
          currNesting = states[current].nesting;
          if (!states[current].hasStarted) {
            if (letter === '{') {
              states[current].hasStarted = true;
            } else {
              return;
            }
          }
          states[current].data += letter;
          if (currNesting.curlies < nesting.curlies) {
            return;
          } else {
            delete states[current].nesting;
            parsingState = false;
            current = '';
            return;
          }
        }
        if (!/[.a-zA-Z0-9]/.test(letter)) {
          if (/^[a-zA-Z0-9_$.]+$/.test(current) && isNextState) {
            states[current] = {
              nesting: shallowClone(nesting),
              data: '',
              hasStarted: false
            };
            parsingState = true;
            isNextState = false;
            return;
          }
          if (current === '.state') {
            isNextState = true;
          }
          return current = '';
        }
        return current += letter;
      });
      Object.keys(states).forEach(function(state) {
        return states[state] = new Function('return ' + states[state].data + ';')();
      });
      return cb(null, states);
    });
  };

  module.exports = createStateObjects;

}).call(this);
